# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DeleteFaceGui.ui'
#
# Created by: PyQt5 UI code generator 5.15.3
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
import pickle
import numpy as np

class DeleteFace(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.MainWindow = MainWindow

        font = QtGui.QFont('Arial', 12, QtGui.QFont.Bold)

        self.box = QtWidgets.QGroupBox(self.centralwidget)
        self.box.setGeometry(QtCore.QRect(20, 20, 241, 151))
        self.box.setObjectName("box")
        self.box.setFont(font)

        self.msg = QtWidgets.QMessageBox(self.centralwidget)
        self.msg.setWindowTitle("Message")
        self.msg.setGeometry(QtCore.QRect(240, 230, 500, 500))

        self.ok = QtWidgets.QPushButton(self.box)
        self.ok.setGeometry(QtCore.QRect(60, 90, 89, 31))
        self.ok.setObjectName("ok")
        self.ok.setStyleSheet("background-color: red")

        self.name = QtWidgets.QLineEdit(self.box)
        self.name.setGeometry(QtCore.QRect(20, 40, 191, 31))
        self.name.setObjectName("name")

        self.box_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.box_2.setGeometry(QtCore.QRect(350, 20, 271, 461))
        self.box_2.setObjectName("box_2")
        self.box_2.setFont(font)

        self.list_face = QtWidgets.QTextBrowser(self.box_2)
        self.list_face.setGeometry(QtCore.QRect(20, 40, 221, 391))
        self.list_face.setObjectName("list_face")

        self.quit = QtWidgets.QPushButton(self.centralwidget)
        self.quit.setGeometry(QtCore.QRect(670, 500, 111, 41))
        self.quit.setObjectName("quit")
        self.quit.setStyleSheet("background-color: red")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
    
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.status = True
        self.image_saved = []
        self.image_name = []

        self.image_path = []

        self.knowEncodings = []
        self.knowName = []

        self.faceName = ""

        self.ok.clicked.connect(self.delete_face)
        self.quit.clicked.connect(self.quitGui)
        self.showListFace()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "DELETE FACE"))
        self.box.setTitle(_translate("MainWindow", "Enter name"))
        self.box_2.setTitle(_translate("MainWindow", "List Name"))
        self.ok.setText(_translate("MainWindow", "OK"))
        self.quit.setText(_translate("MainWindow", "QUIT"))
        self.list_face.setText(_translate("MainWindow", ""))

    def showMessage(self):
        if self.status:
            self.msg.setText("Delete face succesfully!")
        else:
            self.msg.setText("Can not find {} in system" .format(self.name.text()))
        self.msg.exec()
    
    def getDataFromImageFile(self):
        with open("images.pickle", "rb") as f:
            data = pickle.load(f)

        self.image_saved = data["images"]
        self.image_name = data["names"]
        f.close()
    
    def getDataFromEncodingFile(self):
        with open("encodings.pickle", "rb") as g:
            data = pickle.load(g)
        
        self.knowEncodings = data["encodings"]
        self.knowName = data["names"]
        g.close()
            
    def processImageFile(self):
        self.getDataFromImageFile()
        self.getDataFromEncodingFile()

        for name in list(self.image_name):
            if name == self.faceName:
                self.image_saved[self.image_name.index(name)] = []
                self.image_saved.remove(self.image_saved[self.image_name.index(name)])
                self.image_name.remove(name)

                self.knowEncodings[self.knowName.index(name)] = []
                self.knowEncodings.remove(self.knowEncodings[self.knowName.index(name)])
                self.knowName.remove(name)
            else:
                continue

        data1 = {"images": self.image_saved, "names": self.image_name}
        f = open("images.pickle", "wb") 
        f.write(pickle.dumps(data1))
        f.close()
            
        data2 = {"encodings": self.knowEncodings, "names": self.knowName}
        g = open("encodings.pickle", "wb") 
        g.write(pickle.dumps(data2))
        g.close()

    def delete_face(self):
        self.faceName = self.name.text()

        if self.faceName == "":
            self.msg.setText("Please enter name to delete!")
            self.msg.exec()
        else:
            self.image_path = "Dataset/" + self.faceName

            if os.path.exists(self.image_path):
                self.status = True
                self.processImageFile()
                images = os.listdir(self.image_path)
                for image in images:
                    os.remove(self.image_path+"/"+image)
                os.rmdir("Dataset/"+self.faceName)
            else:
                self.status = False

            self.showMessage()
            self.showListFace()

        self.name.setText("")
    
    def showListFace(self):
        self.getDataFromImageFile()
        self.list_face.setText("")
        temp_name = []
        for name in self.image_name:
            if name not in temp_name:
                self.list_face.append(name)
                temp_name.append(name)

    def quitGui(self):
        self.MainWindow.close()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = DeleteFace()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
