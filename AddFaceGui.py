# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'AddFaceGui.ui'
#
# Created by: PyQt5 UI code generator 5.15.3
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import os
from imutils import paths
import face_recognition
import pickle
import numpy as np
import re

class AddFace(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1024, 600)
        MainWindow.setStyleSheet("background-color: white;")
    
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.MainWindow = MainWindow 

        font = QtGui.QFont('Arial', 12, QtGui.QFont.Bold)

        self.box = QtWidgets.QGroupBox(self.centralwidget)
        self.box.setGeometry(QtCore.QRect(530, 10, 471, 241))
        self.box.setObjectName("box")  
        self.box.setFont(font)
    
        self.box_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.box_2.setGeometry(QtCore.QRect(530, 260, 341, 281))
        self.box_2.setObjectName("box_2")
        self.box_2.setFont(font)

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(190, 10, 100, 51))
        self.label.setObjectName("label")
        self.label.setStyleSheet("background-color: yellow")
        
        self.webcam = QtWidgets.QLabel(self.centralwidget)
        self.webcam.setGeometry(QtCore.QRect(30, 90, 450, 450))
        self.webcam.setText("")
        self.webcam.setObjectName("webcam")

        self.name = QtWidgets.QLineEdit(self.box)
        self.name.setGeometry(20, 40, 171, 31)
        self.name.setObjectName("name")

        self.frame = QtWidgets.QFrame(self.box)
        self.frame.setGeometry(10, 90, 431, 131)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setObjectName("frame")

        self.q = QtWidgets.QPushButton(self.frame)
        self.q.setGeometry(20, 10, 21, 25)
        self.q.setObjectName("q")
        self.q.clicked.connect(self.keyQ)

        self.w = QtWidgets.QPushButton(self.frame)
        self.w.setGeometry(60, 10, 21, 25)
        self.w.setObjectName("w")
        self.w.clicked.connect(self.keyW)

        self.e = QtWidgets.QPushButton(self.frame)
        self.e.setGeometry(100, 10, 21, 25)
        self.e.setObjectName("e")
        self.e.clicked.connect(self.keyE)

        self.r = QtWidgets.QPushButton(self.frame)
        self.r.setGeometry(140, 10, 21, 25)
        self.r.setObjectName("r")
        self.r.clicked.connect(self.keyR)

        self.t = QtWidgets.QPushButton(self.frame)
        self.t.setGeometry(180, 10, 21, 25)
        self.t.setObjectName("t")
        self.t.clicked.connect(self.keyT)

        self.y = QtWidgets.QPushButton(self.frame)
        self.y.setGeometry(220, 10, 21, 25)
        self.y.setObjectName("y")
        self.y.clicked.connect(self.keyY)

        self.u = QtWidgets.QPushButton(self.frame)
        self.u.setGeometry(260, 10, 21, 25)
        self.u.setObjectName("u")
        self.u.clicked.connect(self.keyU)

        self.i = QtWidgets.QPushButton(self.frame)
        self.i.setGeometry(300, 10, 21, 25)
        self.i.setObjectName("i")
        self.i.clicked.connect(self.keyI)

        self.o = QtWidgets.QPushButton(self.frame)
        self.o.setGeometry(340, 10, 21, 25)
        self.o.setObjectName("i")
        self.o.clicked.connect(self.keyO)

        self.p = QtWidgets.QPushButton(self.frame)
        self.p.setGeometry(380, 10, 21, 25)
        self.p.setObjectName("p")
        self.p.clicked.connect(self.keyP)

        self.a = QtWidgets.QPushButton(self.frame)
        self.a.setGeometry(20, 50, 21, 25)
        self.a.setObjectName("a")
        self.a.clicked.connect(self.keyA)

        self.s = QtWidgets.QPushButton(self.frame)
        self.s.setGeometry(60, 50, 21, 25)
        self.s.setObjectName("s")
        self.s.clicked.connect(self.keyS)

        self.d = QtWidgets.QPushButton(self.frame)
        self.d.setGeometry(100, 50, 21, 25)
        self.d.setObjectName("d")
        self.d.clicked.connect(self.keyD)

        self.f = QtWidgets.QPushButton(self.frame)
        self.f.setGeometry(140, 50, 21, 25)
        self.f.setObjectName("f")
        self.f.clicked.connect(self.keyF)

        self.g = QtWidgets.QPushButton(self.frame)
        self.g.setGeometry(180, 50, 21, 25)
        self.g.setObjectName("g")
        self.g.clicked.connect(self.keyG)

        self.h = QtWidgets.QPushButton(self.frame)
        self.h.setGeometry(220, 50, 21, 25)
        self.h.setObjectName("h")
        self.h.clicked.connect(self.keyH)

        self.j = QtWidgets.QPushButton(self.frame)
        self.j.setGeometry(260, 50, 21, 25)
        self.j.setObjectName("j")
        self.j.clicked.connect(self.keyJ)

        self.k = QtWidgets.QPushButton(self.frame)
        self.k.setGeometry(300, 50, 21, 25)
        self.k.setObjectName("k")
        self.k.clicked.connect(self.keyK)

        self.l = QtWidgets.QPushButton(self.frame)
        self.l.setGeometry(340, 50, 21, 25)
        self.l.setObjectName("l")
        self.l.clicked.connect(self.keyL)

        self.dele = QtWidgets.QPushButton(self.frame)
        self.dele.setGeometry(380, 50, 31, 25)
        self.dele.setObjectName("dele")
        self.dele.clicked.connect(self.keyDele)

        self.z = QtWidgets.QPushButton(self.frame)
        self.z.setGeometry(20, 90, 21, 25)
        self.z.setObjectName("z")
        self.z.clicked.connect(self.keyZ)

        self.x = QtWidgets.QPushButton(self.frame)
        self.x.setGeometry(60, 90, 21, 25)
        self.x.setObjectName("x")
        self.x.clicked.connect(self.keyX)

        self.c = QtWidgets.QPushButton(self.frame)
        self.c.setGeometry(100, 90, 21, 25)
        self.c.setObjectName("c")
        self.c.clicked.connect(self.keyC)

        self.space = QtWidgets.QPushButton(self.frame)
        self.space.setGeometry(140, 90, 41, 25)
        self.space.setObjectName("space")
        self.space.clicked.connect(self.keySpace)

        self.v = QtWidgets.QPushButton(self.frame)
        self.v.setGeometry(200, 90, 21, 25)
        self.v.setObjectName("v")
        self.v.clicked.connect(self.keyV)

        self.b = QtWidgets.QPushButton(self.frame)
        self.b.setGeometry(240, 90, 21, 25)
        self.b.setObjectName("b")
        self.b.clicked.connect(self.keyB)

        self.n = QtWidgets.QPushButton(self.frame)
        self.n.setGeometry(280, 90, 21, 25)
        self.n.setObjectName("n")
        self.n.clicked.connect(self.keyN)

        self.m = QtWidgets.QPushButton(self.frame)
        self.m.setGeometry(320, 90, 21, 25)
        self.m.setObjectName("m")
        self.m.clicked.connect(self.keyM)

        self.ok = QtWidgets.QPushButton(self.frame)
        self.ok.setGeometry(370, 90, 51, 31)
        self.ok.setObjectName("ok")
        self.ok.setStyleSheet("background-color: red")

        self.train = QtWidgets.QPushButton(self.box_2)
        self.train.setGeometry(140, 40, 161, 41)
        self.train.setObjectName("train")
        self.train.setStyleSheet("background-color : red")

        self.quit = QtWidgets.QPushButton(self.centralwidget)
        self.quit.setGeometry(880, 500, 131, 41)
        self.quit.setObjectName("quit")
        self.quit.setStyleSheet("background-color: red")

        self.status = QtWidgets.QLabel(self.box)
        self.status.setGeometry(200, 40, 231, 31)
        self.status.setObjectName("status")

        self.status1 = QtWidgets.QTextBrowser(self.box_2)
        self.status1.setGeometry(30, 90, 271, 171)
        self.status1.setObjectName("status1")

        self.msg = QtWidgets.QMessageBox(self.centralwidget)

        self.title = "<span style=\" font-size:16pt; font-weight:600; color:#ff0000;\" >"
        self.title += "WEBCAM"

        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
        self.capture=cv2.VideoCapture(0)
        self.timer=QtCore.QTimer()
        self.timer.start(5)
        self.timer.timeout.connect(self.update_frame)
        
        self.timer1 = QtCore.QTimer()

        self.ok.clicked.connect(self.saveImage)
        self.train.clicked.connect(self.training)
        self.quit.clicked.connect(self.quitGui)

        self.run = 0

        self.face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

        self.faces = None
        self.roi = None
        
        self.string_name = ""

        self.image_saved = []
        self.image_name = []

        self.knownEncodings = []
        self.knownNames = []

        #Load image and name saved
        if os.path.getsize("images.pickle") > 0:
            with open("images.pickle", "rb") as e:
                data = pickle.load(e)
            self.image_saved = data["images"]
            self.image_name = data["names"]
            e.close()
        
        #Load names and face encodings saved
        if os.path.getsize("encodings.pickle") > 0:
            with open("encodings.pickle", "rb") as f:
                data = pickle.load(f)
            self.knownEncodings = data["encodings"]
            self.knownNames = data["names"]
            f.close()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "THÊM KHUÔN MẶT VÀO HỆ THỐNG"))
        self.label.setText(_translate("MainWindow", self.title))
        self.box.setTitle(_translate("MainWindow", "Nhập tên"))
        self.box_2.setTitle(_translate("MainWindow", "Lưu khuôn mặt"))
        self.ok.setText(_translate("MainWindow", "OK"))
        self.train.setText(_translate("MainWindow", "Lưu"))
        self.status.setText(_translate("MainWindow", ""))
        self.status1.setText(_translate("MainWindow", ""))
        self.quit.setText(_translate("MainWindow", "QUIT"))
        self.q.setText(_translate("MainWindow", "Q"))
        self.w.setText(_translate("MainWindow", "W"))
        self.e.setText(_translate("MainWindow", "E"))
        self.r.setText(_translate("MainWindow", "R"))
        self.t.setText(_translate("MainWindow", "T"))
        self.y.setText(_translate("MainWindow", "Y"))
        self.u.setText(_translate("MainWindow", "U"))
        self.i.setText(_translate("MainWindow", "I"))
        self.o.setText(_translate("MainWindow", "O"))
        self.p.setText(_translate("MainWindow", "P"))
        self.a.setText(_translate("MainWindow", "A"))
        self.s.setText(_translate("MainWindow", "S"))
        self.d.setText(_translate("MainWindow", "D"))
        self.f.setText(_translate("MainWindow", "F"))
        self.g.setText(_translate("MainWindow", "G"))
        self.h.setText(_translate("MainWindow", "H"))
        self.j.setText(_translate("MainWindow", "J"))
        self.k.setText(_translate("MainWindow", "K"))
        self.l.setText(_translate("MainWindow", "L"))
        self.dele.setText(_translate("MainWindow", "del"))
        self.z.setText(_translate("MainWindow", "Z"))
        self.x.setText(_translate("MainWindow", "X"))
        self.c.setText(_translate("MainWindow", "C"))
        self.space.setText(_translate("MainWindow", ""))
        self.v.setText(_translate("MainWindow", "V"))
        self.b.setText(_translate("MainWindow", "B"))
        self.n.setText(_translate("MainWindow", "N"))
        self.m.setText(_translate("MainWindow", "M"))

    def keyQ(self):
        self.string_name += "Q"
        self.name.setText(self.string_name)

    def keyW(self):
        self.string_name += "B"
        self.name.setText(self.string_name)

    def keyE(self):
        self.string_name += "E"
        self.name.setText(self.string_name)

    def keyR(self):
        self.string_name += "R"
        self.name.setText(self.string_name)

    def keyT(self):
        self.string_name += "T"
        self.name.setText(self.string_name)       
    
    def keyY(self):
        self.string_name += "Y"
        self.name.setText(self.string_name) 

    def keyU(self):
        self.string_name += "U"
        self.name.setText(self.string_name)             

    def keyI(self):
        self.string_name += "I"
        self.name.setText(self.string_name)

    def keyO(self):
        self.string_name += "O"
        self.name.setText(self.string_name)

    def keyP(self):
        self.string_name += "P"
        self.name.setText(self.string_name)

    def keyA(self):
        self.string_name += "A"
        self.name.setText(self.string_name)                

    def keyS(self):
        self.string_name += "S"
        self.name.setText(self.string_name)    

    def keyD(self):
        self.string_name += "T"
        self.name.setText(self.string_name)   

    def keyF(self):
        self.string_name += "F"
        self.name.setText(self.string_name)   

    def keyG(self):
        self.string_name += "G"
        self.name.setText(self.string_name)       

    def keyH(self):
        self.string_name += "H"
        self.name.setText(self.string_name)

    def keyJ(self):
        self.string_name += "J"
        self.name.setText(self.string_name)

    def keyK(self):
        self.string_name += "K"
        self.name.setText(self.string_name)

    def keyL(self):
        self.string_name += "L"
        self.name.setText(self.string_name)

    def keyDele(self):
        self.string_name = self.string_name[:len(self.string_name)-1]
        self.name.setText(self.string_name) 

    def keyZ(self):
        self.string_name += "Z"
        self.name.setText(self.string_name) 

    def keyX(self):
        self.string_name += "X"
        self.name.setText(self.string_name)

    def keyC(self):
        self.string_name += "C"
        self.name.setText(self.string_name)

    def keySpace(self):
        self.string_name += " "
        self.name.setText(self.string_name) 

    def keyV(self):
        self.string_name += "V"
        self.name.setText(self.string_name)

    def keyB(self):
        self.string_name += "B"
        self.name.setText(self.string_name)

    def keyN(self):
        self.string_name += "N"
        self.name.setText(self.string_name)

    def keyM(self):
        self.string_name += "M"
        self.name.setText(self.string_name)   

    def inList(self, image, img_arr):
        check = 0
        for i in img_arr:
            if np.array_equal(i, image) == True:
                check += 1
                break
        if check == 1:
            return True
        else:
            return False
            
    def getIndex(self, imagePath):
        a = imagePath.split('/')[-1]
        b = int(a[:len(a)-4])
        return b

    def showMessage(self):
        self.status.setText("")
        self.timer1.stop()

    def showTraining(self):
        self.msg.setWindowTitle("Lưu khuôn mặt")
        self.msg.setText("Lưu khuôn mặt thành công!")
        self.msg.exec()

    def update_frame(self):
        _, self.image=self.capture.read()
        self.resize_c = cv2.resize(self.image, (1048, 600))
        self.resize = cv2.resize(self.image, (1048, 600))
        self.detect_face()
        self.displayImage(self.resize)    

    def displayImage(self,img):
        outImage=QtGui.QImage(img,img.shape[1],img.shape[0],img.strides[0],QtGui.QImage.Format_RGB888)

        outImage=outImage.rgbSwapped()
      
        self.webcam.setPixmap(QtGui.QPixmap.fromImage(outImage))
        self.webcam.setScaledContents(True)

    def detect_face(self):  
        gray = cv2.cvtColor(self.resize, cv2.COLOR_BGR2GRAY)
        self.faces = self.face_cascade.detectMultiScale(gray,scaleFactor = 1.1, 
            minNeighbors=5, minSize=(100, 100), maxSize = (400, 400))
        
        for (x, y, w, h) in self.faces:
            cv2.rectangle(self.resize, (x, y), (x+w, y+h),
                (0, 255, 0), 5)
        
    def saveImage(self):
        if self.name.text() == "":
            self.msg.setWindowTitle("Thông báo")
            self.msg.setText("Nhập tên của bạn!")
            self.msg.exec()
        else:
            if not os.path.exists('Dataset/'+self.name.text()):
                os.makedirs('Dataset/'+self.name.text())
                self.run = 0
                self.run += 1
            else:
                if self.run == 0:
                    self.run += 1
                while str(self.run) + '.jpg' in os.listdir('Dataset/'+self.name.text()):
                    if str(self.run) + '.jpg' not in os.listdir('Dataset/'+self.name.text()):
                        break
                    self.run += 1

            if len(self.faces) == 1: 
                rgb = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)
                boxes = face_recognition.face_locations(rgb, model='hog') 
                if len(boxes) > 0:
                    cv2.imwrite('Dataset/{}/{}.jpg' .format(self.name.text(), self.run), self.resize_c)
                    self.status.setText("Lưu khuôn mặt thành công!")
                else:
                    self.status.setText("Lưu khuôn mặt không thành công!")
            else:
                self.status.setText("Lưu khuôn mặt không thành công!")
            
            self.timer1.start(1000)
            self.timer1.timeout.connect(self.showMessage)
                
            if not os.path.exists('images.pickle'):
                f = open('images.pickle', 'wb')
                f.close()
            
    def training(self):  
        imagePaths = list(paths.list_images("Dataset"))
        imagePaths.sort(key=lambda f: int(re.sub('\D', '', f)))

        if not os.path.exists("encodings.pickle"):
            f = open("encodings.pickle", "wb")
            f.close()

        for imagePath in imagePaths:
            check = False
            name = imagePath.split(os.path.sep)[-2]
            
            image = cv2.imread(imagePath)
            if not self.inList(image, self.image_saved):
                rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                self.status1.append("[INFO] Lưu khuôn mặt của {} {}/{}".format(name, self.getIndex(imagePath), 
                    len(os.listdir("Dataset/"+name))))

                check = True
                
            else:
                continue
        
            boxes = face_recognition.face_locations(rgb, model='hog')
            
            encodings = face_recognition.face_encodings(rgb, boxes)

            for encoding in encodings:
                if check:
                    self.image_saved.append(image)
                    self.image_name.append(name)
                    self.knownEncodings.append(encoding)
                    self.knownNames.append(name)

        #dump the pixel of image 
        data_1 = {"images": self.image_saved, "names": self.image_name}
        e = open("images.pickle", "wb")
        e.write(pickle.dumps(data_1))
        e.close()

        # dump the facial encodings + names to disk
        data_2 = {"encodings": self.knownEncodings, "names": self.knownNames}
        f = open("encodings.pickle", "wb")
        f.write(pickle.dumps(data_2))
        f.close()

        self.showTraining()

    def quitGui(self):
        self.timer.stop()
        self.capture.release()
        cv2.destroyAllWindows()
        self.MainWindow.close()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    AddFaceGui = QtWidgets.QMainWindow()
    ui = AddFace()
    ui.setupUi(AddFaceGui)
    AddFaceGui.show()
    sys.exit(app.exec_())
